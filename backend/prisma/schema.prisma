generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int       @id @default(autoincrement()) //get id and password from bank when we use online banking
  full_name     String
  email         String    @unique
  password_hash String                            
  phone_number  String?   @unique
  role          Role
  created_at    DateTime  @default(now())
  accounts      Account[]
  employee      Employee?
  loans         Loan[]
  transactions  Transaction[] // Opposite relation for transactions (if not added while Foreign key references to this table gives error)
}

model Account {
  account_id     Int           @id @default(autoincrement())
  user_id        Int
  account_number String        @unique
  branch_code    String?
  ifsc_code      String?   
  account_type   AccountType
  balance        Decimal       @default(0.00)
  currency       String        @default("INR")
  status         AccountStatus @default(active)
  created_at     DateTime      @default(now())

  user           User          @relation(fields: [user_id], references: [user_id], onDelete: SetNull) // SetNull instead of Cascade
  transactions   Transaction[] // Reference to transactions
}

model Loan {
  loan_id       Int        @id @default(autoincrement())
  user_id       Int
  loan_type     LoanType
  amount        Decimal
  interest_rate Decimal?   // Interest rate can be optional for interest-free loans
  tenure_months Int?       // or loan_duration (Some loans may not have a fixed tenure so optional.) 
  status        LoanStatus @default(pending)
  created_at    DateTime   @default(now())

  user          User       @relation(fields: [user_id], references: [user_id], onDelete: SetNull) // SetNull instead of Cascade
  transactions  Transaction[] // Reference to transactions
}

model Branch {
  branch_id   Int        @id @default(autoincrement())
  branch_name String
  address     String
  manager_id  Int?       @unique
  created_at  DateTime   @default(now())
  manager     Employee?  @relation("BranchManager", fields: [manager_id], references: [employee_id])
  employees   Employee[] @relation("BranchEmployees")
}

model Employee {
  employee_id   Int              @id @default(autoincrement())
  user_id       Int              @unique
  branch_id     Int
  position      EmployeePosition
  salary        Decimal
  status        EmployeeStatus   @default(active)
  created_at    DateTime         @default(now())
  managedBranch Branch?          @relation("BranchManager")
  branch        Branch           @relation("BranchEmployees", fields: [branch_id], references: [branch_id], onDelete: Cascade)
  user          User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Transaction {
  transaction_id   Int      @id @default(autoincrement())
  user_id          Int
  account_id       Int
  from_account     String?   // Nullable for deposits
  to_account       String?   // Nullable for withdrawals
  biller_name      String?   // Only for bill payments
  bill_account_no  String?   // Account number for bill payments
  loan_id          Int?      // Nullable, used for loan payments
  amount           Decimal
  transaction_type TransactionType
  payment_method   PaymentMethod
  status           TransactionStatus @default(pending) //remember to consider this default value
  created_at       DateTime @default(now())
  updated_at       DateTime? @updatedAt
  updated_by       Int? // ID of the user/admin who reversed/canceled the transaction
  meta_info        Json? // <-- ðŸ”¥ Add this

  // Relations
  account Account @relation(fields: [account_id], references: [account_id], onDelete: SetNull) // SetNull instead of Cascade
  user    User    @relation(fields: [user_id], references: [user_id], onDelete: SetNull) // SetNull instead of Cascade
  loan    Loan?   @relation(fields: [loan_id], references: [loan_id], onDelete: SetNull) // SetNull instead of Cascade
}

enum TransactionType {
  transfer
  bill_payment
  loan_payment
  deposit
  withdrawal
}

enum TransactionStatus {
  pending
  completed
  failed
  reversed // Track reversals here
}

enum Role {
  user
  employee
  manager
}

enum PaymentMethod {
  cash          // For cash transactions (deposit/withdrawal)
  card          // Includes credit/debit card transactions (POS, online)
  upi           // UPI payments
  bank_transfer // Covers NEFT, IMPS, RTGS, etc.
  cheque        // For cheque-based transactions
  auto_debit    // Includes ECS, recurring payments, loan EMIs
}

enum AccountType {
  savings
  current
  loan
  fixed_deposit
}

enum AccountStatus {
  active
  inactive
  closed
  progress       //and one more suspended could also be there
}

enum LoanType {
  personal
  home
  education
  car
}

enum LoanStatus {
  pending
  approved
  rejected
  closed
}

enum EmployeePosition {
  clerk
  cashier
  loan_officer
  manager
}

enum EmployeeStatus {
  active
  inactive
}

